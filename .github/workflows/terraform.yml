name: Terraform Azure Deployment

on:
  workflow_dispatch:
    inputs:
      UserCount:
        description: 'Number of users and environments to deploy (1-99), recommend only 15 per run. A count of 0 will destroy all users and environments.'
        required: true
        default: '0'
        type: string
      UserStart:
        description: 'Starting index for user numbering'
        required: false
        default: '10'
        type: string
jobs:
  terraform:
    permissions:
      id-token: write
      contents: read

    runs-on: ubuntu-latest

    steps:
      - name: Set up GitHub Actions variables
        run: |
          if [[ ${{ github.event_name == 'workflow_dispatch' }} == true ]]; then
            user_start=${{ inputs.UserStart }}
            user_count=${{ inputs.UserCount }}
          else
            user_start=${{ vars.ENV_USER_START }}
            user_count=${{ vars.ENV_USER_COUNT }}
          fi

          echo "user_start=$user_start" >> $GITHUB_ENV
          echo "user_count=$user_count" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: terraform init -no-color -backend-config="resource_group_name=${{ secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.BACKEND_AZURE_STORAGE_CONTAINER_NAME }}"

      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color -out=tfplan
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_vm_username: ${{ vars.ENV_VM_USERNAME }}
          TF_VAR_username_prefix: ${{ vars.ENV_USERNAME_PREFIX }}
          TF_VAR_user_count: ${{ env.user_count }}
          TF_VAR_user_start: ${{ env.user_start }}
          TF_VAR_rg_suffix: ${{ vars.ENV_RG_SUFFIX }}
          TF_VAR_location: ${{ vars.ENV_LOCATION }}
          TF_VAR_password: ${{ vars.ENV_BASIC_PASSWORD }}
          TF_VAR_fortiflexvm_account_id: ${{ secrets.FORTIFLEXVM_ACCOUNT_ID }}
          TF_VAR_fortiflexvm_program_serial_number: ${{ secrets.FORTIFLEXVM_PROGRAM_SERIAL_NUMBER }}
          TF_VAR_fortiflex_access_username: ${{ secrets.FORTIFLEX_ACCESS_USERNAME }}
          TF_VAR_fortiflex_access_password: ${{ secrets.FORTIFLEX_ACCESS_PASSWORD }}
          TF_VAR_fortiflex_serial_numbers: ${{ secrets.FORTIFLEX_SERIAL_NUMBERS }}

      - name: Terraform Apply
        if: (github.event_name == 'workflow_dispatch')
        id: apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -parallelism=20 -no-color tfplan
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_vm_username: ${{ vars.ENV_VM_USERNAME }}
          TF_VAR_username_prefix: ${{ vars.ENV_USERNAME_PREFIX }}
          TF_VAR_user_count: ${{ env.user_count }}
          TF_VAR_user_start: ${{ env.user_start }}
          TF_VAR_rg_suffix: ${{ vars.ENV_RG_SUFFIX }}
          TF_VAR_location: ${{ vars.ENV_LOCATION }}
          TF_VAR_password: ${{ vars.ENV_BASIC_PASSWORD }}
          TF_VAR_fortiflexvm_account_id: ${{ secrets.FORTIFLEXVM_ACCOUNT_ID }}
          TF_VAR_fortiflexvm_program_serial_number: ${{ secrets.FORTIFLEXVM_PROGRAM_SERIAL_NUMBER }}
          TF_VAR_fortiflex_access_username: ${{ secrets.FORTIFLEX_ACCESS_USERNAME }}
          TF_VAR_fortiflex_access_password: ${{ secrets.FORTIFLEX_ACCESS_PASSWORD }}
          TF_VAR_fortiflex_serial_numbers: ${{ secrets.FORTIFLEX_SERIAL_NUMBERS }}

      - name: Terraform Output
        if: (github.event_name == 'workflow_dispatch')
        id: output
        working-directory: ./terraform
        run: terraform output bastion_shareable_link

      - name: Reboot VMs in resource group
        uses: azure/powershell@v2
        with:
          inlineScript: |
            Start-Sleep -Seconds 60 # Wait for a minute to ensure VMs are ready

            # # Get all VMs matching these names
            # $vmsFadPrimary = Get-AzVM -Name FAD-Primary -ResourceGroupName ${{ vars.ENV_USERNAME_PREFIX }}??-${{ vars.ENV_RG_SUFFIX }}
            # $vmsFadSecondary = Get-AzVM -Name FAD-Secondary -ResourceGroupName ${{ vars.ENV_USERNAME_PREFIX }}??-${{ vars.ENV_RG_SUFFIX }}
            # $vms = @($vmsFadPrimary, $vmsFadSecondary)

            Get-AzVM -ResourceGroupName ${{ vars.ENV_USERNAME_PREFIX }}??-${{ vars.ENV_RG_SUFFIX }} | ?{$_.Name -match 'FAD-Primary|FAD-Secondary'} | Restart-AzVM -WhatIf

            # if ($null -eq $vms -or $vms.Count -eq 0) {
            #     Write-Warning "No VMs found."
            # } else {
            #     # Loop through each VM and restart it
            #     foreach ($vm in $vms) {
            #         Write-Host "Restarting VM: $($vm.Name) in Resource Group: $($vm.ResourceGroupName)..."
            #         Restart-AzVM -ResourceGroupName $($vm.ResourceGroupName) -Name $($vm.Name) -Force
            #     }
            # }
          azPSVersion: "latest"